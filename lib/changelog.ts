/**
 * Changelog / What's New
 *
 * Manten√© este archivo actualizado con cada release importante.
 * El sistema mostrar√° autom√°ticamente las novedades a los usuarios.
 */

export interface ChangelogEntry {
  version: string;
  date: string;
  title: string;
  description: string;
  features?: string[];
  improvements?: string[];
  fixes?: string[];
  emoji?: string;
  highlight?: boolean; // Para marcar releases importantes
}

/**
 * Changelog completo (orden: m√°s reciente primero)
 */
export const CHANGELOG: ChangelogEntry[] = [
  {
    version: '1.2.1',
    date: '2025-10-20',
    title: 'Filtros de Tiempo Corregidos',
    emoji: 'üìä',
    description:
      'Arreglamos un problema importante en los gr√°ficos hist√≥ricos que imped√≠a que los filtros de tiempo funcionaran correctamente.',
    fixes: [
      'Filtros de tiempo (6M, 12M, 24M, 5Y) ahora funcionan correctamente en todos los gr√°ficos',
      'Gr√°ficos de Argentina (IPC, UVA, Riesgo Pa√≠s) ahora respetan el per√≠odo seleccionado',
      'Gr√°ficos de FRED (Tasa FED, CPI, Desempleo, Treasury) ahora muestran datos correctos seg√∫n el filtro',
    ],
    improvements: [
      'Mejor experiencia al explorar datos hist√≥ricos en diferentes per√≠odos',
      'Visualizaci√≥n m√°s precisa de tendencias econ√≥micas',
    ],
  },
  {
    version: '1.2.0',
    date: '2025-10-19',
    title: 'Seguridad Mejorada y Password Reset',
    emoji: 'üõ°Ô∏è',
    highlight: true,
    description:
      'Implementamos mejoras de seguridad importantes y arreglamos la funcionalidad de recuperaci√≥n de contrase√±a.',
    features: [
      'Rate limiting para prevenir ataques de fuerza bruta',
      'Sistema de recuperaci√≥n de contrase√±a completamente funcional',
      'Documentaci√≥n completa de seguridad (SECURITY.md)',
    ],
    improvements: [
      'Dise√±o de p√°gina "Olvid√© mi contrase√±a" renovado',
      'Validaci√≥n de emails mejorada',
      'Logging de seguridad m√°s robusto',
    ],
    fixes: [
      'Correcci√≥n de errores 500 al intentar recuperar contrase√±a',
      'Tabla password_reset_tokens agregada a la base de datos',
    ],
  },
  {
    version: '1.1.0',
    date: '2025-10-19',
    title: 'SEO y Favicons',
    emoji: 'üîç',
    description: 'Optimizamos el sitio para motores de b√∫squeda y redes sociales.',
    features: [
      'Meta tags completos para SEO (Open Graph, Twitter Cards)',
      'Favicons en todos los tama√±os para m√≥viles y escritorio',
      'PWA manifest para instalar como app',
      'Structured Data (Schema.org)',
    ],
    improvements: [
      'Vercel Analytics integrado',
      'Background adaptado para light mode',
      'Idioma del sitio configurado a espa√±ol (es-AR)',
    ],
  },
  {
    version: '1.0.0',
    date: '2025-10-18',
    title: 'Dashboard Redise√±ado',
    emoji: 'üé®',
    highlight: true,
    description: 'Redise√±o completo del dashboard con mejoras visuales y de UX.',
    features: [
      'Tablas profesionales con sparklines integrados',
      'Secci√≥n de favoritos unificada',
      'Gr√°ficos hist√≥ricos comparativos',
      'An√°lisis econ√≥mico detallado',
    ],
    improvements: [
      'Reducci√≥n del bundle size en 0.7 kB',
      'Dise√±o m√°s limpio y profesional',
      'Mejor organizaci√≥n de indicadores',
      'UI consistente en toda la aplicaci√≥n',
    ],
  },
];

/**
 * Obtener la versi√≥n actual (la m√°s reciente)
 */
export function getCurrentVersion(): string {
  return CHANGELOG[0].version;
}

/**
 * Obtener el changelog desde una versi√≥n espec√≠fica
 */
export function getChangelogSince(version: string): ChangelogEntry[] {
  const index = CHANGELOG.findIndex((entry) => entry.version === version);
  if (index === -1) return CHANGELOG;
  return CHANGELOG.slice(0, index);
}

/**
 * Verificar si hay nuevas actualizaciones
 */
export function hasNewUpdates(lastSeenVersion: string | null): boolean {
  if (!lastSeenVersion) return true;
  return lastSeenVersion !== getCurrentVersion();
}

/**
 * Storage key for skipped versions
 */
const SKIPPED_VERSIONS_KEY = 'dg_skipped_versions';

/**
 * Obtener versiones que el usuario decidi√≥ no ver
 */
export function getSkippedVersions(): string[] {
  if (typeof window === 'undefined') return [];
  try {
    const skipped = localStorage.getItem(SKIPPED_VERSIONS_KEY);
    return skipped ? JSON.parse(skipped) : [];
  } catch {
    return [];
  }
}

/**
 * Marcar una versi√≥n como "no mostrar"
 */
export function skipVersion(version: string): void {
  if (typeof window === 'undefined') return;
  try {
    const skipped = getSkippedVersions();
    if (!skipped.includes(version)) {
      skipped.push(version);
      localStorage.setItem(SKIPPED_VERSIONS_KEY, JSON.stringify(skipped));
    }
  } catch (error) {
    console.error('Error skipping version:', error);
  }
}

/**
 * Verificar si una versi√≥n fue marcada como "no mostrar"
 */
export function isVersionSkipped(version: string): boolean {
  return getSkippedVersions().includes(version);
}

/**
 * Contar versiones no vistas (nuevas y no skipped)
 */
export function getUnseenCount(lastSeenVersion: string | null): number {
  const skipped = getSkippedVersions();
  let count = 0;

  for (const entry of CHANGELOG) {
    // Si no hay √∫ltima versi√≥n vista, todas son nuevas
    if (!lastSeenVersion) {
      if (!skipped.includes(entry.version)) count++;
      continue;
    }

    // Si llegamos a la √∫ltima versi√≥n vista, paramos
    if (entry.version === lastSeenVersion) break;

    // Si esta versi√≥n no est√° skipped, contamos
    if (!skipped.includes(entry.version)) count++;
  }

  return count;
}
